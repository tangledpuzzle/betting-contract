{
  "address": "0xB03E99F94635EEc6558E3B98012dcf028EB83370",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fareTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "roundIds",
          "type": "uint256[]"
        }
      ],
      "name": "BatchEntriesSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "BatchEntryWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        }
      ],
      "name": "ContractModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasMinted",
          "type": "bool"
        }
      ],
      "name": "EntrySettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "EntrySubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NFTMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "randomHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRoundStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "revealKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fullRandomNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomEliminator",
          "type": "uint256"
        }
      ],
      "name": "RoundConcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "RoundPausedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTRACT_EXPECTED_VALUE_CEILING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_MINT_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "batchEntryMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchEntryId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "settledAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEntryAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "placedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "roundIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "batchSettleEntries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "revealKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "fullRandomNum",
          "type": "uint256"
        }
      ],
      "name": "concludeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractModes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cardinality",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractExpectedValueFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAllUsersByRoundId",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getBatchEntryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentContractModeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getEliminatorsByRoundId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contractModeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recordedExpectedValueFloor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEliminator",
              "type": "bool"
            }
          ],
          "internalType": "struct FareSpin.Eliminator[]",
          "name": "eliminators",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEntriesByRoundUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contractModeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pickedNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct FareSpin.Entry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entryIdx",
          "type": "uint256"
        }
      ],
      "name": "getEntryByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contractModeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pickedNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct FareSpin.Entry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEntryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFareTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "fareAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        }
      ],
      "name": "getIsEliminator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEliminator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRoundPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contractModeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pickedNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct FareSpin.Entry[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "name": "placeBatchEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomHashMap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "randomHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "revealKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "fullRandomNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomEliminator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contractExpectedValueFloor",
          "type": "uint256"
        }
      ],
      "name": "setContractExpectedValueFloor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cardinality",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractExpectedValueFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryLimit",
          "type": "uint256"
        }
      ],
      "name": "setContractMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryLimit",
          "type": "uint256"
        }
      ],
      "name": "setContractModeEntryLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "setContractModeIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractModeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "setContractModeMinMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fareTokenAddress",
          "type": "address"
        }
      ],
      "name": "setFareToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPauseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setRewardsMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setRoundPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "settleBatchEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "randomHash",
          "type": "bytes32"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalBatchEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc396971505eb0f40909faa327fe96662221549f3e781efa0bc7c810913f827ce",
  "receipt": {
    "to": null,
    "from": "0x3A17045d7db4d825477CeF64cbb9b9a903F93031",
    "contractAddress": "0xB03E99F94635EEc6558E3B98012dcf028EB83370",
    "transactionIndex": 0,
    "gasUsed": "3119357",
    "logsBloom": "0x
    "blockHash": "0x2248e2977b64bf65b03b7d82fc10a0d6b4aec330c63d04ddbc3e0d9dbb60514a",
    "transactionHash": "0xc396971505eb0f40909faa327fe96662221549f3e781efa0bc7c810913f827ce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32651660,
        "transactionHash": "0xc396971505eb0f40909faa327fe96662221549f3e781efa0bc7c810913f827ce",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003a17045d7db4d825477cef64cbb9b9a903f93031",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000058a84f2c5380300000000000000000000000000000000000000000000000000227d9d5b1b10000000000000000000000000000000000000000000000000b8825bb73c5b60b244200000000000000000000000000000000000000000000000001cf3186855d7fd0000000000000000000000000000000000000000000000b8826141c14e25ea472",
        "logIndex": 0,
        "blockHash": "0x2248e2977b64bf65b03b7d82fc10a0d6b4aec330c63d04ddbc3e0d9dbb60514a"
      }
    ],
    "blockNumber": 32651660,
    "cumulativeGasUsed": "3119357",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x309F2a7556c8e53515e045c23656A6cEf035cDb4",
    "0x58C4de90C4E4256f33919b79856db2BB6CBB52F4"
  ],
  "numDeployments": 1,
  "solcInputHash": "c63ef65c01606f6b1a22ee6232f6bfbc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fareTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"}],\"name\":\"BatchEntriesSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BatchEntryWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"}],\"name\":\"ContractModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasMinted\",\"type\":\"bool\"}],\"name\":\"EntrySettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"EntrySubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NFTMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"randomHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"revealKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fullRandomNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomEliminator\",\"type\":\"uint256\"}],\"name\":\"RoundConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"RoundPausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_EXPECTED_VALUE_CEILING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_MINT_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"batchEntryMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchEntryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"settledAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEntryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"placedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roundIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"batchSettleEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"revealKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fullRandomNum\",\"type\":\"uint256\"}],\"name\":\"concludeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractModes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardinality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractExpectedValueFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAllUsersByRoundId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getBatchEntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContractModeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getEliminatorsByRoundId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recordedExpectedValueFloor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEliminator\",\"type\":\"bool\"}],\"internalType\":\"struct FareSpin.Eliminator[]\",\"name\":\"eliminators\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEntriesByRoundUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pickedNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct FareSpin.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryIdx\",\"type\":\"uint256\"}],\"name\":\"getEntryByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pickedNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct FareSpin.Entry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFareTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fareAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"}],\"name\":\"getIsEliminator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEliminator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRoundPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pickedNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct FareSpin.Entry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"name\":\"placeBatchEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomHashMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"randomHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"revealKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fullRandomNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomEliminator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractExpectedValueFloor\",\"type\":\"uint256\"}],\"name\":\"setContractExpectedValueFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardinality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractExpectedValueFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryLimit\",\"type\":\"uint256\"}],\"name\":\"setContractMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryLimit\",\"type\":\"uint256\"}],\"name\":\"setContractModeEntryLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setContractModeIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractModeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"setContractModeMinMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fareTokenAddress\",\"type\":\"address\"}],\"name\":\"setFareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRewardsMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setRoundPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"settleBatchEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"randomHash\",\"type\":\"bytes32\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalBatchEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FareSpin.sol\":\"FareSpin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FareSpin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IFareToken.sol\\\";\\n\\ncontract FareSpin is ReentrancyGuard, Pausable {\\n  using Counters for Counters.Counter;\\n\\n  /* Global Variables START */\\n  address private _owner;\\n  IFareToken private fareToken;\\n  Counters.Counter private _currentRoundId;\\n  Counters.Counter private _currentContractModeId;\\n\\n  // Contract expected value % calculation -> ((CONTRACT_EXPECTED_VALUE_CEILING - contractMode.contractExpectedValueFloor) / CONTRACT_EXPECTED_VALUE_CEILING) / 100 = contractExpectedValuePercentage\\n  uint256 public constant CONTRACT_EXPECTED_VALUE_CEILING = 10**18;\\n\\n  uint256 public constant REWARDS_MINT_CAP = 10**17; // 10%\\n  uint256 public rewardsMint = 10**16; // Percent to rewards on entry\\n  address public rewardsAddress;\\n\\n  bool public isRoundPaused = false;\\n  // uint256 public withdrawalPeriod = 1 seconds;\\n  uint256 public withdrawalPeriod = 3 hours;\\n\\n  /* Global Variables END */\\n\\n  /* Structs START */\\n  struct Entry {\\n    uint256 amount;\\n    uint256 contractModeId;\\n    uint256 pickedNumber;\\n  }\\n\\n  struct BatchEntry {\\n    uint256 batchEntryId; // Relates to index position in rounds[roundId].users[batchEntryId]\\n    address user;\\n    bool settled;\\n    uint256 settledAt;\\n    uint256 totalEntryAmount;\\n    uint256 totalMintAmount;\\n    uint256 placedAt;\\n    uint256 withdrewAt;\\n    Entry[] entries;\\n  }\\n\\n  struct ContractMode {\\n    uint256 id;\\n    uint256 cardinality;\\n    uint256 contractExpectedValueFloor;\\n    uint256 mintMultiplier;\\n    uint256 minAmount;\\n    uint256 maxAmount;\\n    uint256 entryLimit;\\n    bool isActive;\\n  }\\n\\n  struct Eliminator {\\n    uint256 contractModeId;\\n    uint256 recordedExpectedValueFloor; // contractModeFloor at the time of the round\\n    bool isEliminator;\\n  }\\n\\n  struct Round {\\n    uint256 id;\\n    uint256 startedAt;\\n    uint256 endedAt;\\n    bytes32 randomHash;\\n    bytes32 revealKey;\\n    uint256 fullRandomNum;\\n    uint256 randomNum;\\n    uint256 randomEliminator;\\n    address[] users; // User addresses in round used to reference BatchEntry mapping\\n    Eliminator[] eliminators;\\n    /* Eliminator[] is the length of contractModes at the time the round was concluded\\n         Since contractModeFloors can be adjusted individually we need to store the contractModeFloors each round */\\n  }\\n\\n  struct EntryHistory {\\n    uint256 gmAmount; // totalAmount placed for given contractMode\\n    uint256 entryLimit; // amount of entries placed for given contractMode\\n    bool[] pickedList;\\n  }\\n  /* Structs END */\\n\\n  /* Modifiers START */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Caller is not the owner\\\");\\n    _;\\n  }\\n  /* Modifiers END */\\n\\n  /* Mappings START */\\n  mapping(uint256 => ContractMode) public contractModes; // contractModeId => ContractMode\\n  mapping(uint256 => Round) public rounds; // roundId => Round\\n  mapping(uint256 => mapping(address => BatchEntry)) public batchEntryMap; // roundId => userAddress => BatchEntry\\n  mapping(uint256 => bytes32) public randomHashMap; // roundId => bytes32(key to reveal randomHash)\\n  /* Mappings END */\\n\\n  /* Events START */\\n  event ContractModeUpdated(uint256 indexed contractModeId);\\n  event EntrySubmitted(\\n    uint256 indexed roundId,\\n    uint256 indexed batchId,\\n    address indexed user\\n  );\\n  event EntrySettled(\\n    uint256 indexed roundId,\\n    address indexed user,\\n    bool hasMinted\\n  );\\n  event BatchEntriesSettled(address indexed user, uint256[] roundIds);\\n  event RoundConcluded(\\n    uint256 indexed roundId,\\n    bytes32 indexed revealKey,\\n    uint256 fullRandomNum,\\n    uint256 randomNum,\\n    uint256 randomEliminator\\n  );\\n  event NewRoundStarted(\\n    uint256 indexed roundId,\\n    bytes32 indexed randomHash,\\n    uint256 startedAt\\n  );\\n  event BatchEntryWithdraw(uint256 indexed roundId, address indexed user);\\n  event NFTMint(uint256 indexed roundId, address indexed user);\\n  event RoundPausedChanged(bool isPaused);\\n\\n  /* Events END */\\n\\n  constructor(address _fareTokenAddress, address _rewardsAddress) {\\n    require(\\n      _fareTokenAddress != address(0),\\n      \\\"Not a valid address for _fareTokenAddress\\\"\\n    );\\n    require(\\n      _rewardsAddress != address(0),\\n      \\\"Not a valid address for _rewardsAddress\\\"\\n    );\\n\\n    _owner = msg.sender; // Set owner to contract creator\\n    fareToken = IFareToken(_fareTokenAddress);\\n    rewardsAddress = _rewardsAddress;\\n  }\\n\\n  /* Getters START */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  function getFareTokenAddress() public view returns (address fareAddress) {\\n    fareAddress = address(fareToken);\\n  }\\n\\n  function getCurrentContractModeId() public view returns (uint256 id) {\\n    id = _currentContractModeId.current();\\n  }\\n\\n  function getCurrentRoundId() public view returns (uint256 id) {\\n    id = _currentRoundId.current();\\n  }\\n\\n  function getBatchEntryCount(uint256 roundId)\\n    public\\n    view\\n    returns (uint256 count)\\n  {\\n    count = rounds[roundId].users.length;\\n  }\\n\\n  function getEntryCount(uint256 roundId, address user)\\n    public\\n    view\\n    returns (uint256 count)\\n  {\\n    count = batchEntryMap[roundId][user].entries.length;\\n  }\\n\\n  function getEntriesByRoundUser(uint256 roundId, address user)\\n    public\\n    view\\n    returns (Entry[] memory)\\n  {\\n    Entry[] memory entries = batchEntryMap[roundId][user].entries;\\n    return entries;\\n  }\\n\\n  function getEntryByIndex(\\n    uint256 roundId,\\n    address user,\\n    uint256 entryIdx\\n  ) public view returns (Entry memory) {\\n    Entry memory entry = batchEntryMap[roundId][user].entries[entryIdx];\\n    return entry;\\n  }\\n\\n  function getAllUsersByRoundId(uint256 roundId)\\n    public\\n    view\\n    returns (address[] memory users)\\n  {\\n    users = rounds[roundId].users;\\n  }\\n\\n  function getIsEliminator(uint256 roundId, uint256 contractModeId)\\n    public\\n    view\\n    returns (bool isEliminator)\\n  {\\n    isEliminator = rounds[roundId].eliminators[contractModeId].isEliminator;\\n  }\\n\\n  function getEliminatorsByRoundId(uint256 roundId)\\n    public\\n    view\\n    returns (Eliminator[] memory eliminators)\\n  {\\n    eliminators = rounds[roundId].eliminators;\\n  }\\n\\n  /* Getters END */\\n\\n  /* Setters START */\\n  function setFareToken(address _fareTokenAddress) external onlyOwner {\\n    require(_fareTokenAddress != address(0), \\\"_fareTokenAddress is invalid\\\");\\n    fareToken = IFareToken(_fareTokenAddress);\\n  }\\n\\n  function setRewardsAddress(address _rewardsAddress) external onlyOwner {\\n    require(_rewardsAddress != address(0), \\\"_rewardsAddress is invalid\\\");\\n    rewardsAddress = _rewardsAddress;\\n  }\\n\\n  function setRewardsMint(uint256 percent) external onlyOwner {\\n    require(percent <= REWARDS_MINT_CAP, \\\"Rewards mint % must be <= 10%\\\");\\n    rewardsMint = percent;\\n  }\\n\\n  function setContractMode(\\n    uint256 cardinality,\\n    uint256 contractExpectedValueFloor,\\n    uint256 mintMultiplier,\\n    uint256 minAmount,\\n    uint256 maxAmount,\\n    uint256 entryLimit\\n  ) external onlyOwner {\\n    require(entryLimit <= cardinality, \\\"Limit greater than cardinality\\\");\\n    if ((minAmount > 0 && maxAmount > 0) && minAmount > maxAmount) {\\n      revert(\\\"minAmount greater than maxAmount\\\");\\n    }\\n\\n    uint256 gmid = _currentContractModeId.current();\\n    contractModes[gmid] = ContractMode({\\n      id: gmid,\\n      cardinality: cardinality,\\n      contractExpectedValueFloor: contractExpectedValueFloor,\\n      mintMultiplier: mintMultiplier,\\n      minAmount: minAmount,\\n      maxAmount: maxAmount,\\n      entryLimit: entryLimit,\\n      isActive: true\\n    });\\n\\n    _currentContractModeId.increment();\\n    emit ContractModeUpdated(gmid);\\n  }\\n\\n  function setContractModeMinMax(\\n    uint256 contractModeId,\\n    uint256 minAmount,\\n    uint256 maxAmount\\n  ) external onlyOwner {\\n    if ((minAmount > 0 && maxAmount > 0) && minAmount > maxAmount) {\\n      revert(\\\"minAmount greater than maxAmount\\\");\\n    }\\n    require(\\n      contractModeId < _currentContractModeId.current(),\\n      \\\"Invalid contract mode\\\"\\n    );\\n\\n    contractModes[contractModeId].minAmount = minAmount;\\n    contractModes[contractModeId].maxAmount = maxAmount;\\n    emit ContractModeUpdated(contractModeId);\\n  }\\n\\n  function setContractModeIsActive(uint256 contractModeId, bool isActive)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      contractModeId < _currentContractModeId.current(),\\n      \\\"Invalid contract mode\\\"\\n    );\\n\\n    contractModes[contractModeId].isActive = isActive;\\n    emit ContractModeUpdated(contractModeId);\\n  }\\n\\n  function setContractExpectedValueFloor(\\n    uint256 contractModeId,\\n    uint256 _contractExpectedValueFloor\\n  ) external onlyOwner {\\n    require(\\n      contractModeId < _currentContractModeId.current(),\\n      \\\"Invalid contract mode\\\"\\n    );\\n    require(\\n      _contractExpectedValueFloor < CONTRACT_EXPECTED_VALUE_CEILING,\\n      \\\"Floor must be less than ceiling\\\"\\n    );\\n\\n    contractModes[contractModeId]\\n      .contractExpectedValueFloor = _contractExpectedValueFloor;\\n    emit ContractModeUpdated(contractModeId);\\n  }\\n\\n  function setContractModeEntryLimit(uint256 contractModeId, uint256 entryLimit)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      contractModeId < _currentContractModeId.current(),\\n      \\\"Invalid contract mode\\\"\\n    );\\n    require(\\n      entryLimit <= contractModes[contractModeId].cardinality,\\n      \\\"entryLimit > cardinality\\\"\\n    );\\n\\n    contractModes[contractModeId].entryLimit = entryLimit;\\n    emit ContractModeUpdated(contractModeId);\\n  }\\n\\n  function setEliminators(uint256 randomEliminator, uint256 roundId) internal {\\n    uint256 cgmid = _currentContractModeId.current();\\n\\n    for (uint256 gmid = 0; gmid < cgmid; gmid++) {\\n      rounds[roundId].eliminators.push(\\n        Eliminator({\\n          contractModeId: gmid,\\n          recordedExpectedValueFloor: contractModes[gmid]\\n            .contractExpectedValueFloor,\\n          isEliminator: randomEliminator >=\\n            contractModes[gmid].contractExpectedValueFloor\\n        })\\n      );\\n    }\\n  }\\n\\n  function setRoundPaused(bool paused) public onlyOwner {\\n    isRoundPaused = paused;\\n    emit RoundPausedChanged(paused);\\n  }\\n\\n  function setPauseContract(bool paused) public onlyOwner {\\n    if (paused) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n\\n  /* Setters END */\\n\\n  function createEntryHistory() internal view returns (EntryHistory[] memory) {\\n    uint256 contractModeCount = _currentContractModeId.current();\\n    EntryHistory[] memory entryHistory = new EntryHistory[](contractModeCount);\\n\\n    for (uint256 gmid = 0; gmid < entryHistory.length; gmid++) {\\n      entryHistory[gmid] = EntryHistory({\\n        gmAmount: 0,\\n        entryLimit: 0,\\n        pickedList: new bool[](contractModes[gmid].cardinality)\\n      });\\n    }\\n\\n    return entryHistory;\\n  }\\n\\n  function placeBatchEntry(Entry[] memory entries)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    require(!isRoundPaused, \\\"Round is paused\\\");\\n    require(\\n      rounds[_currentRoundId.current()].startedAt > 0 &&\\n        rounds[_currentRoundId.current()].endedAt == 0,\\n      \\\"Round has not started yet.\\\"\\n    );\\n\\n    uint256 contractModeCount = _currentContractModeId.current();\\n    uint256 entryCount = entries.length;\\n    uint256 rid = _currentRoundId.current();\\n    uint256 batchEntryId = rounds[rid].users.length;\\n\\n    uint256 totalEntryAmount = 0;\\n    EntryHistory[] memory entryHistory = createEntryHistory(); // Array index is contractModeId | used to enforce entry requirements\\n\\n    BatchEntry storage batchEntry = batchEntryMap[rid][msg.sender]; // Get storage reference for batchEntry by userAddress\\n\\n    require(\\n      batchEntry.totalEntryAmount == 0,\\n      \\\"Already entered in current round\\\"\\n    );\\n\\n    for (uint256 idx = 0; idx < entryCount; idx++) {\\n      require(\\n        entries[idx].contractModeId < _currentContractModeId.current(),\\n        \\\"Invalid contract mode\\\"\\n      );\\n      ContractMode memory contractMode = contractModes[\\n        entries[idx].contractModeId\\n      ];\\n\\n      require(entries[idx].amount != 0, \\\"Amount cannot be zero\\\");\\n      require(contractMode.isActive, \\\"Contract mode is not active\\\");\\n      require(\\n        entries[idx].pickedNumber < contractMode.cardinality,\\n        \\\"Invalid picked number\\\"\\n      );\\n      // Ensure number has already been picked by user\\n      require(\\n        !entryHistory[contractMode.id].pickedList[entries[idx].pickedNumber],\\n        \\\"Duplicate pickedNumber by contract\\\"\\n      );\\n\\n      entryHistory[contractMode.id].pickedList[\\n        entries[idx].pickedNumber\\n      ] = true;\\n\\n      // Ensure the max entry amount isn't exceeded for the specific contract mode\\n      if (contractMode.maxAmount > 0) {\\n        // If maxAmount is set(> 0), then keep track of contractMode min/max requirements\\n        entryHistory[contractMode.id].gmAmount =\\n          entryHistory[contractMode.id].gmAmount +\\n          entries[idx].amount;\\n        require(\\n          entryHistory[contractMode.id].gmAmount < contractMode.maxAmount,\\n          \\\"Contract mode max amount exceeded\\\"\\n        );\\n      }\\n\\n      entryHistory[contractMode.id].entryLimit =\\n        entryHistory[contractMode.id].entryLimit +\\n        1;\\n      require(\\n        entryHistory[contractMode.id].entryLimit <= contractMode.entryLimit,\\n        \\\"Contract mode entry limit exceeded\\\"\\n      );\\n\\n      totalEntryAmount = totalEntryAmount + entries[idx].amount;\\n\\n      batchEntry.entries.push(\\n        Entry({\\n          contractModeId: contractMode.id,\\n          pickedNumber: entries[idx].pickedNumber,\\n          amount: entries[idx].amount\\n        })\\n      );\\n    }\\n\\n    // If minAmount is set(> 0) for a contractMode, ensure the minAmount for each contractMode was met\\n    for (uint256 gmid = 0; gmid < contractModeCount; gmid++) {\\n      if (\\n        contractModes[gmid].minAmount > 0 &&\\n        entryHistory[gmid].gmAmount < contractModes[gmid].minAmount\\n      ) {\\n        revert(\\\"Contract mode min amount not met\\\");\\n      }\\n    }\\n\\n    batchEntry.batchEntryId = batchEntryId; // Current index position for user\\n    batchEntry.user = msg.sender;\\n    batchEntry.totalEntryAmount = totalEntryAmount; // Sum of all entry amounts\\n    batchEntry.totalMintAmount = 0; // Probably don't need this since it defaults to 0\\n    batchEntry.settled = false; // Probably don't need this since it defaults to false\\n    batchEntry.placedAt = block.timestamp;\\n\\n    rounds[rid].users.push(msg.sender); // Add user's address to round users array\\n\\n    fareToken.burnFare(msg.sender, totalEntryAmount);\\n    fareToken.mintFare(\\n      rewardsAddress,\\n      (totalEntryAmount * rewardsMint) / 10**18\\n    );\\n\\n    emit EntrySubmitted(rid, batchEntryId, msg.sender);\\n  }\\n\\n  function withdrawalBatchEntry() external nonReentrant whenNotPaused {\\n    uint256 rid = _currentRoundId.current();\\n    BatchEntry storage batchEntry = batchEntryMap[rid][msg.sender];\\n    require(batchEntry.totalEntryAmount != 0, \\\"Batch entry does not exist\\\");\\n    require(batchEntry.withdrewAt == 0, \\\"Already withdrew entry\\\");\\n    require(\\n      (batchEntry.placedAt + withdrawalPeriod) < block.timestamp,\\n      \\\"Withdrawal not available yet\\\"\\n    );\\n    require(!batchEntry.settled, \\\"Entry already settled\\\");\\n\\n    batchEntry.withdrewAt = block.timestamp;\\n\\n    fareToken.mintFare(msg.sender, batchEntry.totalEntryAmount);\\n\\n    fareToken.burnFare(\\n      rewardsAddress,\\n      (batchEntry.totalEntryAmount * rewardsMint) / 10**18\\n    );\\n    emit BatchEntryWithdraw(rid, msg.sender);\\n  }\\n\\n  function settleBatchEntry(uint256 roundId, address user)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    BatchEntry storage batchEntry = batchEntryMap[roundId][user];\\n    Entry[] memory entries = batchEntry.entries;\\n    require(batchEntry.withdrewAt == 0, \\\"You already withdrew from the round\\\");\\n    require(batchEntry.totalEntryAmount != 0, \\\"Batch entry does not exist\\\");\\n    require(!batchEntry.settled, \\\"Entry already settled\\\");\\n    require(_currentRoundId.current() > roundId, \\\"Round not yet resolved\\\");\\n\\n    bool hasMintedNFT = false;\\n    uint256 totalMintAmount = 0;\\n\\n    for (uint256 idx = 0; idx < entries.length; idx++) {\\n      if (\\n        getIsEliminator(roundId, entries[idx].contractModeId) && !hasMintedNFT\\n      ) {\\n        mintEliminatorNFT(roundId, batchEntry.user);\\n        hasMintedNFT = true;\\n      } else {\\n        ContractMode memory contractMode = contractModes[\\n          entries[idx].contractModeId\\n        ];\\n\\n        uint256 rng = rounds[roundId].randomNum;\\n\\n        if (rng % contractMode.cardinality == entries[idx].pickedNumber) {\\n          totalMintAmount += (entries[idx].amount *\\n            contractMode.mintMultiplier);\\n        }\\n      }\\n    }\\n\\n    if (totalMintAmount > 0) {\\n      fareToken.mintFare(batchEntry.user, totalMintAmount);\\n      batchEntry.totalMintAmount = totalMintAmount;\\n    }\\n\\n    batchEntry.settled = true;\\n    batchEntry.settledAt = block.timestamp;\\n\\n    emit EntrySettled(roundId, batchEntry.user, batchEntry.totalMintAmount > 0);\\n  }\\n\\n  function batchSettleEntries(uint256[] memory roundIds, address user)\\n    public\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    require(roundIds.length > 0, \\\"BatchEntry list cannot be empty.\\\");\\n    require(\\n      roundIds.length < 21,\\n      \\\"You can only settle 20 batch entries at a time.\\\"\\n    );\\n    for (uint256 index = 0; index < roundIds.length; index++) {\\n      uint256 roundId = roundIds[index];\\n      BatchEntry storage batchEntry = batchEntryMap[roundId][user];\\n      Entry[] memory entries = batchEntry.entries;\\n      require(\\n        batchEntry.withdrewAt == 0,\\n        \\\"You already withdrew from the round\\\"\\n      );\\n      require(batchEntry.totalEntryAmount != 0, \\\"Batch entry does not exist\\\");\\n      require(!batchEntry.settled, \\\"Entry already settled\\\");\\n      require(_currentRoundId.current() > roundId, \\\"Round not yet resolved\\\");\\n\\n      bool hasMintedNFT = false;\\n      uint256 totalMintAmount = 0;\\n\\n      for (uint256 idx = 0; idx < entries.length; idx++) {\\n        if (\\n          getIsEliminator(roundId, entries[idx].contractModeId) && !hasMintedNFT\\n        ) {\\n          mintEliminatorNFT(roundId, user);\\n          hasMintedNFT = true;\\n        } else {\\n          ContractMode memory contractMode = contractModes[\\n            entries[idx].contractModeId\\n          ];\\n\\n          uint256 rng = rounds[roundId].randomNum;\\n\\n          if (rng % contractMode.cardinality == entries[idx].pickedNumber) {\\n            totalMintAmount += (entries[idx].amount *\\n              contractMode.mintMultiplier);\\n          }\\n        }\\n      }\\n\\n      if (totalMintAmount > 0) {\\n        fareToken.mintFare(batchEntry.user, totalMintAmount);\\n        batchEntry.totalMintAmount = totalMintAmount;\\n      }\\n\\n      batchEntry.settled = true;\\n      batchEntry.settledAt = block.timestamp;\\n    }\\n\\n    emit BatchEntriesSettled(user, roundIds);\\n  }\\n\\n  function concludeRound(bytes32 revealKey, uint256 fullRandomNum)\\n    external\\n    onlyOwner\\n    whenNotPaused\\n  {\\n    uint256 rid = _currentRoundId.current();\\n    Round storage round = rounds[rid];\\n\\n    require(\\n      keccak256(abi.encodePacked(revealKey, fullRandomNum)) == round.randomHash,\\n      \\\"revealKey and randomness is invalid.\\\"\\n    );\\n    require(\\n      rounds[_currentRoundId.current()].users.length > 0,\\n      \\\"No users in round.\\\"\\n    );\\n    require(isRoundPaused, \\\"Must pause round before concluding.\\\");\\n    require(\\n      round.startedAt > 0 && round.endedAt == 0,\\n      \\\"Round already concluded.\\\"\\n    );\\n\\n    uint256 randomNum = fullRandomNum % 100;\\n    uint256 randomEliminator = fullRandomNum % CONTRACT_EXPECTED_VALUE_CEILING;\\n\\n    round.id = rid;\\n    round.fullRandomNum = fullRandomNum;\\n    round.randomNum = randomNum;\\n    round.revealKey = revealKey;\\n    round.randomEliminator = randomEliminator;\\n    round.endedAt = block.timestamp;\\n\\n    // Set Round -> Eliminators[] with current eliminator floors and randomEliminator\\n    setEliminators(randomEliminator, rid);\\n\\n    _currentRoundId.increment();\\n    emit RoundConcluded(\\n      rid,\\n      revealKey,\\n      fullRandomNum,\\n      randomNum,\\n      randomEliminator\\n    );\\n  }\\n\\n  function startNewRound(bytes32 randomHash) external onlyOwner whenNotPaused {\\n    uint256 rid = _currentRoundId.current();\\n    Round storage round = rounds[rid];\\n    require(randomHash != bytes32(0), \\\"randomHash is required.\\\");\\n    require(\\n      round.startedAt == 0 && round.endedAt == 0,\\n      \\\"Round already started.\\\"\\n    );\\n\\n    round.startedAt = block.timestamp;\\n    round.randomHash = randomHash;\\n    randomHashMap[rid] = randomHash;\\n\\n    isRoundPaused = false;\\n    emit RoundPausedChanged(false);\\n    emit NewRoundStarted(rid, randomHash, round.startedAt);\\n  }\\n\\n  function mintEliminatorNFT(uint256 roundId, address user)\\n    internal\\n    whenNotPaused\\n  {\\n    emit NFTMint(roundId, user);\\n  }\\n\\n  function getRandomness() private view returns (uint256) {\\n    uint256 upperLimit = type(uint256).max;\\n    uint256 seed = uint256(\\n      keccak256(\\n        abi.encodePacked(\\n          block.timestamp +\\n            block.difficulty +\\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) /\\n              (block.timestamp)) +\\n            block.gaslimit +\\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\\n              (block.timestamp)) +\\n            block.number\\n        )\\n      )\\n    );\\n\\n    return (seed - ((seed / upperLimit) * upperLimit));\\n  }\\n}\\n\",\"keccak256\":\"0x0004dc816147c2d59c987842219592260ade38bd46d12e8d6248629f27533029\",\"license\":\"MIT\"},\"contracts/interfaces/IFareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IFareToken { \\n    function mintFare(address user, uint256 amount) external;\\n    function burnFare(address user, uint256 amount) external;\\n    function setAllowContractMintBurn(address _contractAddress, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x46ab6efbdbeec9f77d7fcaa94f86db99438e4cdbada7bde072d26db0d2ad2d04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c8063812391f011610130578063b04d52bf116100b8578063e601af731161007c578063e601af73146106b3578063eb8bbe38146106c6578063f9985f26146106ce578063fd41631a146106df578063fed71e65146106f257600080fd5b8063b04d52bf146105e0578063bb50a772146105f3578063bca7093d14610684578063c0973eed1461068d578063cf5b8eda146106a057600080fd5b80638da5cb5b116100ff5780638da5cb5b1461053857806390a04d3414610562578063a49a75a514610575578063ad9ed3a2146105ad578063aec0bc70146105c057600080fd5b8063812391f01461046357806381a38061146104865780638906758d146104995780638c65c81f146104ac57600080fd5b80634998f2c4116101be5780635c975abb116101825780635c975abb146104175780636626418714610422578063741889691461043557806374ba284f14610448578063767cc6431461045b57600080fd5b80634998f2c41461039d5780634cc08581146103ac578063530759e9146103cc5780635727e25d146103ef578063582dadf5146103f757600080fd5b8063171b611111610205578063171b6111146103355780631e1e77d81461034857806327dba8ad146103575780633980b7bf1461036a5780634851c6591461037d57600080fd5b80630727ad251461023757806309003b50146102535780630f1cf7b3146102735780631111691014610288575b600080fd5b61024060055481565b6040519081526020015b60405180910390f35b610266610261366004612dfd565b610706565b60405161024a9190612e29565b610286610281366004612f1f565b6107a4565b005b6102ec610296366004612dfd565b600a602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03851695600160a01b90950460ff169488565b604080519889526001600160a01b039097166020890152941515958701959095526060860192909252608085015260a084015260c083019190915260e08201526101000161024a565b610286610343366004612fc7565b610c76565b61024067016345785d8a000081565b610286610365366004612fe9565b610f2d565b610286610378366004612fc7565b6110de565b61039061038b36600461302c565b6111b2565b60405161024a9190613045565b610240670de0b6b3a764000081565b6102406103ba36600461302c565b600b6020526000908152604090205481565b6103df6103da366004612fc7565b611246565b604051901515815260200161024a565b610240611287565b61040a61040536600461302c565b611297565b60405161024a91906130a0565b60015460ff166103df565b61028661043036600461302c565b611306565b610286610443366004612dfd565b6114a0565b6102866104563660046130e1565b611873565b610240611960565b61024061047136600461302c565b60009081526009602052604090206008015490565b61028661049436600461310d565b61196b565b6102866104a736600461310d565b611a12565b6104fd6104ba36600461302c565b6009602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161024a565b60015461010090046001600160a01b03165b6040516001600160a01b03909116815260200161024a565b61028661057036600461313f565b611ab9565b610240610583366004612dfd565b6000918252600a602090815260408084206001600160a01b03909316845291905290206007015490565b6102866105bb366004612fc7565b611b3f565b6105d36105ce366004613162565b611c1d565b60405161024a9190613197565b6102866105ee36600461302c565b611cbc565b61064761060136600461302c565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909160ff1688565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e08201526101000161024a565b61024060075481565b60065461054a906001600160a01b031681565b6102866106ae3660046131b8565b611d48565b6102866106c13660046131b8565b611dcf565b610286611e17565b6002546001600160a01b031661054a565b6102866106ed3660046131d3565b612092565b6006546103df90600160a01b900460ff1681565b6000828152600a602090815260408083206001600160a01b03851684528252808320600701805482518185028101850190935280835260609493849084015b828210156107955783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610745565b50929450505050505b92915050565b6107ac612a45565b6107b4612a9f565b600082511161080a5760405162461bcd60e51b815260206004820181905260248201527f4261746368456e747279206c6973742063616e6e6f7420626520656d7074792e60448201526064015b60405180910390fd5b60158251106108735760405162461bcd60e51b815260206004820152602f60248201527f596f752063616e206f6e6c7920736574746c6520323020626174636820656e7460448201526e3934b2b99030ba1030903a34b6b29760891b6064820152608401610801565b60005b8251811015610c2657600083828151811061089357610893613291565b6020908102919091018101516000818152600a835260408082206001600160a01b03881683528452808220600781018054835181880281018801909452808452949650909492939192909190849084015b8282101561093457838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906108e4565b505050509050816006015460001461095e5760405162461bcd60e51b8152600401610801906132a7565b600382015461097f5760405162461bcd60e51b8152600401610801906132ea565b6001820154600160a01b900460ff16156109ab5760405162461bcd60e51b815260040161080190613321565b826109b560035490565b116109fb5760405162461bcd60e51b8152602060048201526016602482015275149bdd5b99081b9bdd081e595d081c995cdbdb1d995960521b6044820152606401610801565b60008060005b8351811015610b7b57610a3186858381518110610a2057610a20613291565b602002602001015160200151611246565b8015610a3b575082155b15610a5357610a4a8689612ae5565b60019250610b69565b600060086000868481518110610a6b57610a6b613291565b60209081029190910181015181015182528181019290925260409081016000908120825161010081018452815481526001820154818601526002820154818501526003820154606082015260048201546080820152600582015460a082015260068083015460c083015260079092015460ff16151560e08201528b835260099094529190200154865191925090869084908110610b0a57610b0a613291565b602002602001015160400151826020015182610b269190613366565b1415610b66578160600151868481518110610b4357610b43613291565b602002602001015160000151610b599190613390565b610b6390856133af565b93505b50505b80610b73816133c7565b915050610a01565b508015610bf4576002546001850154604051632bf545c760e11b81526001600160a01b039182166004820152602481018490529116906357ea8b8e90604401600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b50505050600484018190555b50505060018101805460ff60a01b1916600160a01b179055426002909101555080610c1e816133c7565b915050610876565b50806001600160a01b03167f798f8a8a70fdda84420f8148df89e16b8f46a006f74d812a12fe555b64c9abcb83604051610c6091906133e2565b60405180910390a2610c726001600055565b5050565b60015461010090046001600160a01b03163314610ca55760405162461bcd60e51b81526004016108019061341a565b610cad612a9f565b6000610cb860035490565b600081815260096020908152604091829020600381015483519283018890529282018690529293506060016040516020818303038152906040528051906020012014610d525760405162461bcd60e51b8152602060048201526024808201527f72657665616c4b657920616e642072616e646f6d6e65737320697320696e76616044820152633634b21760e11b6064820152608401610801565b600060096000610d6160035490565b815260208101919091526040016000206008015411610db75760405162461bcd60e51b81526020600482015260126024820152712737903ab9b2b9399034b7103937bab7321760711b6044820152606401610801565b600654600160a01b900460ff16610e1c5760405162461bcd60e51b815260206004820152602360248201527f4d75737420706175736520726f756e64206265666f726520636f6e636c75646960448201526237339760e91b6064820152608401610801565b60008160010154118015610e3257506002810154155b610e7e5760405162461bcd60e51b815260206004820152601860248201527f526f756e6420616c726561647920636f6e636c756465642e00000000000000006044820152606401610801565b6000610e8b606485613366565b90506000610ea1670de0b6b3a764000086613366565b848455600584018690556006840183905560048401879055600784018190554260028501559050610ed28185612b27565b610ee0600380546001019055565b6040805186815260208101849052908101829052869085907ffa7649dce8dd2a5bb5b648e3fc101302f45a5e9ffa996d546837446f8c655b8d9060600160405180910390a3505050505050565b60015461010090046001600160a01b03163314610f5c5760405162461bcd60e51b81526004016108019061341a565b85811115610fac5760405162461bcd60e51b815260206004820152601e60248201527f4c696d69742067726561746572207468616e2063617264696e616c69747900006044820152606401610801565b600083118015610fbc5750600082115b8015610fc757508183115b156110145760405162461bcd60e51b815260206004820181905260248201527f6d696e416d6f756e742067726561746572207468616e206d6178416d6f756e746044820152606401610801565b600061101f60045490565b604080516101008101825282815260208082018b81528284018b8152606084018b8152608085018b815260a086018b815260c087018b8152600160e0890181815260008c815260089099529990972097518855945187870155925160028701559051600386015551600480860191909155905160058501559051600684015592516007909201805460ff19169215159290921790915581540190559050604051819060008051602061349583398151915290600090a250505050505050565b60015461010090046001600160a01b0316331461110d5760405162461bcd60e51b81526004016108019061341a565b600454821061112e5760405162461bcd60e51b815260040161080190613451565b670de0b6b3a764000081106111855760405162461bcd60e51b815260206004820152601f60248201527f466c6f6f72206d757374206265206c657373207468616e206365696c696e67006044820152606401610801565b60008281526008602052604080822060020183905551839160008051602061349583398151915291a25050565b606060096000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b8282101561123b5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff1615159183019190915290835290920191016111ea565b505050509050919050565b600082815260096020819052604082200180548390811061126957611269613291565b600091825260209091206002600390920201015460ff169392505050565b600061129260035490565b905090565b6000818152600960209081526040918290206008018054835181840281018401909452808452606093928301828280156112fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112dc575b50505050509050919050565b60015461010090046001600160a01b031633146113355760405162461bcd60e51b81526004016108019061341a565b61133d612a9f565b600061134860035490565b6000818152600960205260409020909150826113a65760405162461bcd60e51b815260206004820152601760248201527f72616e646f6d486173682069732072657175697265642e0000000000000000006044820152606401610801565b60018101541580156113ba57506002810154155b6113ff5760405162461bcd60e51b81526020600482015260166024820152752937bab7321030b63932b0b23c9039ba30b93a32b21760511b6044820152606401610801565b426001820155600381018390556000828152600b602090815260408083208690556006805460ff60a01b19169055519182527f566e91f99008ecb36dceb72af2a1cd0519db0ccef530792829d62681fd319b30910160405180910390a182827f80c2dc9c61b0a154b438dfd6000927bf269e5ee544a24e81fb0f4510c82cb870836001015460405161149391815260200190565b60405180910390a3505050565b6114a8612a45565b6114b0612a9f565b6000828152600a602090815260408083206001600160a01b03851684528252808320600781018054835181860281018601909452808452919493909190849084015b8282101561154257838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906114f2565b505050509050816006015460001461156c5760405162461bcd60e51b8152600401610801906132a7565b600382015461158d5760405162461bcd60e51b8152600401610801906132ea565b6001820154600160a01b900460ff16156115b95760405162461bcd60e51b815260040161080190613321565b836115c360035490565b116116095760405162461bcd60e51b8152602060048201526016602482015275149bdd5b99081b9bdd081e595d081c995cdbdb1d995960521b6044820152606401610801565b60008060005b83518110156117875761162e87858381518110610a2057610a20613291565b8015611638575082155b1561165f5760018501546116569088906001600160a01b0316612ae5565b60019250611775565b60006008600086848151811061167757611677613291565b60209081029190910181015181015182528181019290925260409081016000908120825161010081018452815481526001820154818601526002820154818501526003820154606082015260048201546080820152600582015460a082015260068083015460c083015260079092015460ff16151560e08201528c83526009909452919020015486519192509086908490811061171657611716613291565b6020026020010151604001518260200151826117329190613366565b141561177257816060015186848151811061174f5761174f613291565b6020026020010151600001516117659190613390565b61176f90856133af565b93505b50505b8061177f816133c7565b91505061160f565b508015611800576002546001850154604051632bf545c760e11b81526001600160a01b039182166004820152602481018490529116906357ea8b8e90604401600060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b50505050600484018190555b600184018054600160a01b60ff60a01b19821617909155426002860155600485015460405190151581526001600160a01b039091169087907f488ab6b2e5b3b17c2e7ed02f7dd03132639a79fa01716841f9452383627b227f9060200160405180910390a350505050610c726001600055565b60015461010090046001600160a01b031633146118a25760405162461bcd60e51b81526004016108019061341a565b6000821180156118b25750600081115b80156118bd57508082115b1561190a5760405162461bcd60e51b815260206004820181905260248201527f6d696e416d6f756e742067726561746572207468616e206d6178416d6f756e746044820152606401610801565b600454831061192b5760405162461bcd60e51b815260040161080190613451565b6000838152600860205260408082206004810185905560050183905551849160008051602061349583398151915291a2505050565b600061129260045490565b60015461010090046001600160a01b0316331461199a5760405162461bcd60e51b81526004016108019061341a565b6001600160a01b0381166119f05760405162461bcd60e51b815260206004820152601c60248201527f5f66617265546f6b656e4164647265737320697320696e76616c6964000000006044820152606401610801565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60015461010090046001600160a01b03163314611a415760405162461bcd60e51b81526004016108019061341a565b6001600160a01b038116611a975760405162461bcd60e51b815260206004820152601a60248201527f5f726577617264734164647265737320697320696e76616c69640000000000006044820152606401610801565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015461010090046001600160a01b03163314611ae85760405162461bcd60e51b81526004016108019061341a565b6004548210611b095760405162461bcd60e51b815260040161080190613451565b600082815260086020526040808220600701805460ff191684151517905551839160008051602061349583398151915291a25050565b60015461010090046001600160a01b03163314611b6e5760405162461bcd60e51b81526004016108019061341a565b6004548210611b8f5760405162461bcd60e51b815260040161080190613451565b600082815260086020526040902060010154811115611bf05760405162461bcd60e51b815260206004820152601860248201527f656e7472794c696d6974203e2063617264696e616c69747900000000000000006044820152606401610801565b60008281526008602052604080822060060183905551839160008051602061349583398151915291a25050565b611c4160405180606001604052806000815260200160008152602001600081525090565b6000848152600a602090815260408083206001600160a01b03871684529091528120600701805484908110611c7857611c78613291565b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050809150509392505050565b60015461010090046001600160a01b03163314611ceb5760405162461bcd60e51b81526004016108019061341a565b67016345785d8a0000811115611d435760405162461bcd60e51b815260206004820152601d60248201527f52657761726473206d696e742025206d757374206265203c3d203130250000006044820152606401610801565b600555565b60015461010090046001600160a01b03163314611d775760405162461bcd60e51b81526004016108019061341a565b60068054821515600160a01b0260ff60a01b199091161790556040517f566e91f99008ecb36dceb72af2a1cd0519db0ccef530792829d62681fd319b3090611dc490831515815260200190565b60405180910390a150565b60015461010090046001600160a01b03163314611dfe5760405162461bcd60e51b81526004016108019061341a565b8015611e0f57611e0c612bd1565b50565b611e0c612c25565b611e1f612a45565b611e27612a9f565b6000611e3260035490565b6000818152600a602090815260408083203384529091529020600381015491925090611e705760405162461bcd60e51b8152600401610801906132ea565b600681015415611ebb5760405162461bcd60e51b8152602060048201526016602482015275416c726561647920776974686472657720656e74727960501b6044820152606401610801565b426007548260050154611ece91906133af565b10611f1b5760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c206e6f7420617661696c61626c6520796574000000006044820152606401610801565b6001810154600160a01b900460ff1615611f475760405162461bcd60e51b815260040161080190613321565b4260068201556002546003820154604051632bf545c760e11b815233600482015260248101919091526001600160a01b03909116906357ea8b8e90604401600060405180830381600087803b158015611f9f57600080fd5b505af1158015611fb3573d6000803e3d6000fd5b505060025460065460055460038601546001600160a01b039384169550637f923e6094509290911691670de0b6b3a764000091611fef91613390565b611ff99190613480565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561203f57600080fd5b505af1158015612053573d6000803e3d6000fd5b50506040513392508491507fc61164bc00a37712d7436ca60d4edc232e411e4ef4dd785157848daa6cddf68a90600090a350506120906001600055565b565b61209a612a45565b6120a2612a9f565b600654600160a01b900460ff16156120ee5760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081a5cc81c185d5cd959608a1b6044820152606401610801565b6000600960006120fd60035490565b81526020019081526020016000206001015411801561213a57506009600061212460035490565b8152602001908152602001600020600201546000145b6121865760405162461bcd60e51b815260206004820152601a60248201527f526f756e6420686173206e6f742073746172746564207965742e0000000000006044820152606401610801565b600061219160045490565b825190915060006121a160035490565b600081815260096020526040812060080154919250806121bf612c5e565b6000858152600a6020908152604080832033845290915290206003810154919250901561222e5760405162461bcd60e51b815260206004820181905260248201527f416c726561647920656e746572656420696e2063757272656e7420726f756e646044820152606401610801565b60005b868110156127e15760045489828151811061224e5761224e613291565b602002602001015160200151106122775760405162461bcd60e51b815260040161080190613451565b6000600860008b848151811061228f5761228f613291565b602002602001015160200151815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050905089828151811061232a5761232a613291565b6020026020010151600001516000141561237e5760405162461bcd60e51b8152602060048201526015602482015274416d6f756e742063616e6e6f74206265207a65726f60581b6044820152606401610801565b8060e001516123cf5760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d6f6465206973206e6f742061637469766500000000006044820152606401610801565b80602001518a83815181106123e6576123e6613291565b602002602001015160400151106124375760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103834b1b5b2b210373ab6b132b960591b6044820152606401610801565b8381600001518151811061244d5761244d613291565b6020026020010151604001518a838151811061246b5761246b613291565b6020026020010151604001518151811061248757612487613291565b6020026020010151156124e75760405162461bcd60e51b815260206004820152602260248201527f4475706c6963617465207069636b65644e756d62657220627920636f6e74726160448201526118dd60f21b6064820152608401610801565b6001848260000151815181106124ff576124ff613291565b6020026020010151604001518b848151811061251d5761251d613291565b6020026020010151604001518151811061253957612539613291565b9115156020928302919091019091015260a08101511561263c5789828151811061256557612565613291565b6020026020010151600001518482600001518151811061258757612587613291565b60200260200101516000015161259d91906133af565b848260000151815181106125b3576125b3613291565b60209081029190910101515260a08101518151855186919081106125d9576125d9613291565b6020026020010151600001511061263c5760405162461bcd60e51b815260206004820152602160248201527f436f6e7472616374206d6f6465206d617820616d6f756e7420657863656564656044820152601960fa1b6064820152608401610801565b8381600001518151811061265257612652613291565b602002602001015160200151600161266a91906133af565b8482600001518151811061268057612680613291565b602002602001015160200181815250508060c00151848260000151815181106126ab576126ab613291565b60200260200101516020015111156127105760405162461bcd60e51b815260206004820152602260248201527f436f6e7472616374206d6f646520656e747279206c696d697420657863656564604482015261195960f21b6064820152608401610801565b89828151811061272257612722613291565b6020026020010151600001518561273991906133af565b94508260070160405180606001604052808c858151811061275c5761275c613291565b6020026020010151600001518152602001836000015181526020018c858151811061278957612789613291565b60209081029190910181015160409081015190925283546001818101865560009586529482902084516003909202019081559083015193810193909355015160029091015550806127d9816133c7565b915050612231565b5060005b8781101561289b576000818152600860205260409020600401541580159061283c5750600081815260086020526040902060040154835184908390811061282e5761282e613291565b602002602001015160000151105b156128895760405162461bcd60e51b815260206004820181905260248201527f436f6e7472616374206d6f6465206d696e20616d6f756e74206e6f74206d65746044820152606401610801565b80612893816133c7565b9150506127e5565b5083815560018082018054600384018690556000600480860182905560ff60a01b19339081166001600160a81b031990941693909317909355426005860155888152600960209081526040808320600801805496870181558352912090930180546001600160a01b0319168217905560025492516303fc91f360e51b815291820152602481018590526001600160a01b0390911690637f923e6090604401600060405180830381600087803b15801561295357600080fd5b505af1158015612967573d6000803e3d6000fd5b50506002546006546005546001600160a01b0392831694506357ea8b8e9350911690670de0b6b3a76400009061299d9088613390565b6129a79190613480565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156129ed57600080fd5b505af1158015612a01573d6000803e3d6000fd5b505060405133925086915087907fc03e0b12906d102f05416b84b16272e887bdcc9e0ec10d3b18a2a88d88edfdd590600090a450505050505050611e0c6001600055565b60026000541415612a985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610801565b6002600055565b60015460ff16156120905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610801565b612aed612a9f565b6040516001600160a01b0382169083907f694782527f5a66f715f32799c163a69579929a5548642eb0e121da554410171290600090a35050565b6000612b3260045490565b905060005b81811015612bcb576000838152600960208181526040808420815160608101835286815286865260088085528387206002908101548387018181529287528c10159483019485529290950180546001808201835591885294909620905160039094020192835592519382019390935591519101805460ff191691151591909117905580612bc3816133c7565b915050612b37565b50505050565b612bd9612a9f565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a1565b612c2d612d98565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612c08565b60606000612c6b60045490565b905060008167ffffffffffffffff811115612c8857612c88612e8b565b604051908082528060200260200182016040528015612cdd57816020015b612cca60405180606001604052806000815260200160008152602001606081525090565b815260200190600190039081612ca65790505b50905060005b8151811015612d915760405180606001604052806000815260200160008152602001600860008481526020019081526020016000206001015467ffffffffffffffff811115612d3457612d34612e8b565b604051908082528060200260200182016040528015612d5d578160200160208202803683370190505b50815250828281518110612d7357612d73613291565b60200260200101819052508080612d89906133c7565b915050612ce3565b5092915050565b60015460ff166120905760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610801565b80356001600160a01b0381168114612df857600080fd5b919050565b60008060408385031215612e1057600080fd5b82359150612e2060208401612de1565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612e7f57612e6c8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101612e45565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612ec457612ec4612e8b565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ef357612ef3612e8b565b604052919050565b600067ffffffffffffffff821115612f1557612f15612e8b565b5060051b60200190565b60008060408385031215612f3257600080fd5b823567ffffffffffffffff811115612f4957600080fd5b8301601f81018513612f5a57600080fd5b80356020612f6f612f6a83612efb565b612eca565b82815260059290921b83018101918181019088841115612f8e57600080fd5b938201935b83851015612fac57843582529382019390820190612f93565b9550612fbb9050868201612de1565b93505050509250929050565b60008060408385031215612fda57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561300257600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60006020828403121561303e57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561309357815180518552868101518786015285015115158585015260609093019290850190600101613062565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612e7f5783516001600160a01b0316835292840192918401916001016130bc565b6000806000606084860312156130f657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561311f57600080fd5b61312882612de1565b9392505050565b80358015158114612df857600080fd5b6000806040838503121561315257600080fd5b82359150612e206020840161312f565b60008060006060848603121561317757600080fd5b8335925061318760208501612de1565b9150604084013590509250925092565b8151815260208083015190820152604080830151908201526060810161079e565b6000602082840312156131ca57600080fd5b6131288261312f565b600060208083850312156131e657600080fd5b823567ffffffffffffffff8111156131fd57600080fd5b8301601f8101851361320e57600080fd5b803561321c612f6a82612efb565b8181526060918202830184019184820191908884111561323b57600080fd5b938501935b838510156132855780858a0312156132585760008081fd5b613260612ea1565b8535815286860135878201526040808701359082015283529384019391850191613240565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082526023908201527f596f7520616c72656164792077697468647265772066726f6d2074686520726f6040820152621d5b9960ea1b606082015260800190565b6020808252601a908201527f426174636820656e74727920646f6573206e6f74206578697374000000000000604082015260600190565b602080825260159082015274115b9d1c9e48185b1c9958591e481cd95d1d1b1959605a1b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261337557613375613350565b500690565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156133aa576133aa61337a565b500290565b600082198211156133c2576133c261337a565b500190565b60006000198214156133db576133db61337a565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015612e7f578351835292840192918401916001016133fe565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b602080825260159082015274496e76616c696420636f6e7472616374206d6f646560581b604082015260600190565b60008261348f5761348f613350565b50049056fe8737f869d841892b3129422522ac69ac1189cf401d8cb0dc9948efa837731181a2646970667358221220dd7b07fb40b4fe45c874da10a1245d581a46e19bfc8b0b31dc28118379a2b69864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3983,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3882,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 13896,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13899,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "fareToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFareToken)18736"
      },
      {
        "astId": 13902,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "_currentRoundId",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)8521_storage"
      },
      {
        "astId": 13905,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "_currentContractModeId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)8521_storage"
      },
      {
        "astId": 13920,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "rewardsMint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13922,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "rewardsAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13925,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "isRoundPaused",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 13928,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "withdrawalPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14029,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "contractModes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(ContractMode)13973_storage)"
      },
      {
        "astId": 14034,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "rounds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Round)14004_storage)"
      },
      {
        "astId": 14041,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "batchEntryMap",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BatchEntry)13956_storage))"
      },
      {
        "astId": 14045,
        "contract": "contracts/FareSpin.sol:FareSpin",
        "label": "randomHashMap",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Eliminator)13980_storage)dyn_storage": {
        "base": "t_struct(Eliminator)13980_storage",
        "encoding": "dynamic_array",
        "label": "struct FareSpin.Eliminator[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Entry)13935_storage)dyn_storage": {
        "base": "t_struct(Entry)13935_storage",
        "encoding": "dynamic_array",
        "label": "struct FareSpin.Entry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFareToken)18736": {
        "encoding": "inplace",
        "label": "contract IFareToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(BatchEntry)13956_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FareSpin.BatchEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchEntry)13956_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(BatchEntry)13956_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FareSpin.BatchEntry))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(BatchEntry)13956_storage)"
      },
      "t_mapping(t_uint256,t_struct(ContractMode)13973_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FareSpin.ContractMode)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractMode)13973_storage"
      },
      "t_mapping(t_uint256,t_struct(Round)14004_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FareSpin.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)14004_storage"
      },
      "t_struct(BatchEntry)13956_storage": {
        "encoding": "inplace",
        "label": "struct FareSpin.BatchEntry",
        "members": [
          {
            "astId": 13937,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "batchEntryId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13939,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13941,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "settled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 13943,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "settledAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13945,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "totalEntryAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13947,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "totalMintAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13949,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "placedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13951,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "withdrewAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13955,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "entries",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Entry)13935_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(ContractMode)13973_storage": {
        "encoding": "inplace",
        "label": "struct FareSpin.ContractMode",
        "members": [
          {
            "astId": 13958,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13960,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "cardinality",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13962,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "contractExpectedValueFloor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13964,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "mintMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13966,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "minAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13968,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "maxAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13970,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "entryLimit",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13972,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "isActive",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Counter)8521_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8520,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Eliminator)13980_storage": {
        "encoding": "inplace",
        "label": "struct FareSpin.Eliminator",
        "members": [
          {
            "astId": 13975,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "contractModeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13977,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "recordedExpectedValueFloor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13979,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "isEliminator",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Entry)13935_storage": {
        "encoding": "inplace",
        "label": "struct FareSpin.Entry",
        "members": [
          {
            "astId": 13930,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13932,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "contractModeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13934,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "pickedNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Round)14004_storage": {
        "encoding": "inplace",
        "label": "struct FareSpin.Round",
        "members": [
          {
            "astId": 13982,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13984,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "startedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13986,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "endedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13988,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "randomHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 13990,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "revealKey",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 13992,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "fullRandomNum",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13994,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "randomNum",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13996,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "randomEliminator",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13999,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "users",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14003,
            "contract": "contracts/FareSpin.sol:FareSpin",
            "label": "eliminators",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Eliminator)13980_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}